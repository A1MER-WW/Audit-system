"use client";

import { Fragment, useEffect, useMemo, useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { cn } from "@/lib/utils";
import { ChevronDown, ChevronUp, Info, FileText, Loader2 } from "lucide-react";
import Link from "next/link";
import { useRouter } from "next/navigation";
import {
  useAnnualEvaluations,
  ApiAnnualEvaluation,
} from "@/hooks/useAnnualEvaluations";

/** ---------------- UI constants ---------------- */
export type AnnualHeaderStatus =
  | "ASSESSOR_IN_PROGRESS"
  | "AWAITING_DIRECTOR_REVIEW"
  | "DIRECTOR_REJECTED"
  | "DIRECTOR_APPROVED";

export type TabKey =
  | "all"
  | "unit"
  | "work"
  | "project"
  | "carry"
  | "activity"
  | "process"
  | "it";

const DYNAMIC_HEAD: Record<TabKey, string> = {
  all: "‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏á‡∏≤‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö",
  unit: "‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏ï‡∏≤‡∏°‡∏Å‡∏é‡∏Å‡∏£‡∏∞‡∏ó‡∏£‡∏ß‡∏á",
  work: "‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î",
  project: "‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î",
  carry: "‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î",
  activity: "‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° (‡∏ú‡∏•‡∏ú‡∏•‡∏¥‡∏ï) ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î",
  process: "‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î",
  it: "‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö IT ‡πÅ‡∏•‡∏∞ NON IT ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î",
};

const TAB_LABELS: Record<TabKey, string> = {
  all: "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
  unit: "‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô",
  work: "‡∏á‡∏≤‡∏ô",
  project: "‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£",
  carry: "‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏´‡∏•‡∏∑‡πà‡∏≠‡∏°‡∏õ‡∏µ",
  activity: "‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°",
  process: "‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏á‡∏≤‡∏ô",
  it: "IT ‡πÅ‡∏•‡∏∞ Non-IT",
};

const STATUS_LABELS = {
  DONE: "‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß",
  IN_PROGRESS: "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô",
  NOT_STARTED: "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô",
} as const;

/** ---------------- Row type ---------------- */

type Row = {
  id: string;
  index: string; // ‡∏û‡∏≤‡πÄ‡∏£‡∏ô‡∏ï‡πå: "1" | ‡∏•‡∏π‡∏Å: "1.1"
  unit: string; // parent: label ‡∏£‡∏ß‡∏°, child: ‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á
  topic: string;
  score: number; // parent: sum, child: ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô
  grade: "H" | "M" | "L" | "E" | "N" | "-";
  status: string; // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏£‡∏∏‡∏õ (parent) / ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏≤‡∏¢‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î (child)
  hasDoc: boolean; // parent=false, child=true
  categoryName: string;
  itType: "IT" | "Non-IT" | "-" | "";
};

type Group = {
  parent: Row;
  children: Row[];
};

/** ---------------- Utils ---------------- */

function GradeBadge({ grade }: { grade: string }) {
  if (!grade || grade === "-")
    return <span className="text-muted-foreground">-</span>;
  const intent =
    grade === "E"
      ? "bg-red-100 text-red-700 border-red-200"
      : grade === "H"
      ? "bg-orange-100 text-orange-700 border-orange-200"
      : grade === "M"
      ? "bg-yellow-100 text-yellow-700 border-yellow-200"
      : grade === "L"
      ? "bg-lime-100 text-lime-700 border-lime-200"
      : "bg-green-100 text-green-700 border-green-200"; // N ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏∑‡πà‡∏ô‡πÜ
  
  const gradeText = 
    grade === "E" ? "‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å"
    : grade === "H" ? "‡∏™‡∏π‡∏á"
    : grade === "M" ? "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á"
    : grade === "L" ? "‡∏ô‡πâ‡∏≠‡∏¢"
    : grade === "N" ? "‡∏ô‡πâ‡∏≠‡∏¢‡∏°‡∏≤‡∏Å"
    : grade;
    
  return (
    <Badge variant="outline" className={cn("rounded-full px-2", intent)}>
      {gradeText}
    </Badge>
  );
}

function StatusBadge({ value }: { value: string }) {
  const map: Record<string, string> = {
    [STATUS_LABELS.IN_PROGRESS]: "bg-blue-100 text-blue-700 border-blue-200",
    [STATUS_LABELS.DONE]: "bg-emerald-100 text-emerald-700 border-emerald-200",
    [STATUS_LABELS.NOT_STARTED]: "bg-red-100 text-red-700 border-red-200",
  };
  return (
    <Badge
      variant="outline"
      className={cn("rounded-full px-3", map[value] || "")}
    >
      {value}
    </Badge>
  );
}

const gradeFromScore = (s?: number) =>
  !s || s <= 0
    ? "-"
    : s >= 80
    ? "E"
    : s >= 60
    ? "H"
    : s >= 40
    ? "M"
    : s >= 20
    ? "L"
    : "N";

function categoriesForTab(tab: TabKey): string[] | null {
  switch (tab) {
    case "unit":
      return ["‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô"];
    case "work":
      return ["‡∏á‡∏≤‡∏ô"];
    case "project":
      return ["‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£"];
    case "carry":
      return ["‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏´‡∏•‡∏∑‡πà‡∏≠‡∏°‡∏õ‡∏µ"];
    case "activity":
      return ["‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°"];
    case "process":
      return ["‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏á‡∏≤‡∏ô"];
    case "it":
      return ["IT/Non-IT"];
    default:
      return null;
  }
}

/** ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ */
function getAssessmentStatus(
  compoundId: string,
  fallbackScore: number
): string {
  // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô 0 = ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô
  if (!fallbackScore || fallbackScore <= 0) {
    console.log(`üí° No score from API for ${compoundId}: ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô`);
    return "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô";
  }

  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏à‡∏≤‡∏Å localStorage (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ó‡∏≤‡∏á)
    const savedStatus = localStorage.getItem(`assessment_status_${compoundId}`);
    if (savedStatus && savedStatus === "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô") {
      console.log(
        `üìã In progress from localStorage: ${compoundId} -> ${savedStatus}`
      );
      return savedStatus;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏à‡∏≤‡∏Å localStorage
    const savedData = localStorage.getItem(`assessment_data_${compoundId}`);
    if (savedData) {
      try {
        const assessmentData = JSON.parse(savedData);
        if (assessmentData.status === "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô") {
          console.log(
            `üìä In progress from assessment data: ${compoundId} -> ${assessmentData.status}`
          );
          return assessmentData.status;
        }
      } catch (parseError) {
        console.warn(
          "Failed to parse assessment data from localStorage:",
          parseError
        );
      }
    }
  } catch (error) {
    console.warn("Cannot access localStorage:", error);
  }

  // ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å API ‡πÅ‡∏•‡πâ‡∏ß = ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
  const status = "‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß";
  console.log(
    `‚úÖ Has score from API for ${compoundId}: ${status} (score: ${fallbackScore})`
  );
  return status;
}

/** ‡∏™‡∏£‡πâ‡∏≤‡∏á Group (‡∏û‡∏≤‡πÄ‡∏£‡∏ô‡∏ï‡πå + ‡∏•‡∏π‡∏Å) ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• API ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏°‡∏≤ */
function buildGroups(
  annualEvaluations: ApiAnnualEvaluation[],
  tabCats: string[] | null
): Group[] {
  const groups: Group[] = [];
  // ‡πÄ‡∏Å‡πá‡∏ö‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠‡πÅ‡∏•‡πâ‡∏ß ‡∏ï‡πà‡∏≠ "‡∏´‡∏°‡∏ß‡∏î"
  const seenByCategory = new Map<string, Set<string>>();

  annualEvaluations.forEach((a) => {
    a.RiskEvaluations.forEach((re) => {
      if (tabCats && !tabCats.includes(re.category.name)) return;

      // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° set ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏ô‡∏µ‡πâ
      if (!seenByCategory.has(re.category.name)) {
        seenByCategory.set(re.category.name, new Set());
      }
      const seenTopics = seenByCategory.get(re.category.name)!;

      re.auditTopics.forEach((t) => {
        // ‚úÖ ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏ã‡πâ‡∏≥‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏´‡∏°‡∏ß‡∏î "‡∏á‡∏≤‡∏ô"
        const allowDup = re.category.name === "‡∏á‡∏≤‡∏ô";
        const key = (t.auditTopic || "").trim();

        if (!allowDup) {
          // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏´‡∏°‡∏ß‡∏î "‡∏á‡∏≤‡∏ô" ‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏à‡∏≠‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß ‚Üí ‡∏Ç‡πâ‡∏≤‡∏°
          if (seenTopics.has(key)) return;
          seenTopics.add(key);
        }

        // ... (‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡∏£‡πâ‡∏≤‡∏á children / parent ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
        const children: Row[] = t.DepartmentAssessmentScore.map((ds) => {
          const childScore = ds.department.composite_score ?? 0;

          // ‡∏™‡∏£‡πâ‡∏≤‡∏á compound ID ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô
          const compoundId = `a${a.id}-c${re.id}-t${t.id}-d${ds.department.id}`;

          // ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏à‡∏≤‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
          const departmentStatus = getAssessmentStatus(compoundId, childScore);

          return {
            id: compoundId,
            index: "",
            unit: ds.department.departmentName,
            topic: t.auditTopic,
            score: childScore,
            grade:
              (ds.department.grade as Row["grade"]) ||
              gradeFromScore(childScore),
            status: departmentStatus,
            hasDoc: true,
            categoryName: re.category.name,
            itType:
              re.category.name === "IT"
                ? "IT"
                : re.category.name === "Non-IT"
                ? "Non-IT"
                : "-",
          };
        });

        const unitNames = children.map((c) => c.unit);
        const uniqUnits = Array.from(new Set(unitNames)).filter(Boolean);
        let unitLabel = "-";
        if (uniqUnits.length === 1) unitLabel = uniqUnits[0]!;
        else if (uniqUnits.length === 2)
          unitLabel = `${uniqUnits[0]} ‡πÅ‡∏•‡∏∞ ${uniqUnits[1]}`;
        else if (uniqUnits.length > 2)
          unitLabel = `${uniqUnits[0]} ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å ${uniqUnits.length - 1} ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô`;

        const totalScore = children.reduce((s, c) => s + (c.score || 0), 0);
        const statuses = children.map((c) => c.status);
        const allDone = statuses.every((s) => s === "‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß");
        const someInProgress = statuses.some((s) => s === "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô");
        const someNotStarted = statuses.some((s) => s === "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô");

        let parentStatus: string;
        if (allDone) {
          parentStatus = "‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß";
        } else if (
          someInProgress ||
          (statuses.some((s) => s === "‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß") && someNotStarted)
        ) {
          parentStatus = "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô";
        } else {
          parentStatus = "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô";
        }

        console.log(`üîç Parent status calculation for ${t.auditTopic}:`);
        console.log(`  üìä Children statuses: ${statuses.join(", ")}`);
        console.log(`  ‚úÖ All done: ${allDone}`);
        console.log(`  üîÑ Some in progress: ${someInProgress}`);
        console.log(`  ‚ùå Some not started: ${someNotStarted}`);
        console.log(`  üìã Final parent status: ${parentStatus}`);

        const parentScore = t.composite_score ?? t.total_score ?? totalScore;
        const parentGrade = ((t as { grade?: string }).grade ?? gradeFromScore(parentScore)) as "H" | "M" | "L" | "E" | "N" | "-";

        const parent: Row = {
          id: `group:a${a.id}-c${re.id}-t${t.id}`,
          index: "",
          unit: unitLabel,
          topic: t.auditTopic,
          score: parentScore,
          grade: parentGrade,
          status: parentStatus,
          hasDoc: false,
          categoryName: re.category.name,
          itType:
            re.category.name === "IT"
              ? "IT"
              : re.category.name === "Non-IT"
              ? "Non-IT"
              : "-",
        };

        groups.push({ parent, children });
      });
    });
  });

  // ‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏•‡∏Ç index ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°
  groups.forEach((g, gi) => {
    const parentIndex = `${gi + 1}`;
    g.parent.index = parentIndex;
    g.children.forEach((c, cj) => (c.index = `${parentIndex}.${cj + 1}`));
  });

  return groups;
}

const AnnualStatusLabel: Record<AnnualHeaderStatus, string> = {
  ASSESSOR_IN_PROGRESS: "‡∏ú‡∏π‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á",
  AWAITING_DIRECTOR_REVIEW:
    "‡∏£‡∏≠‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á",
  DIRECTOR_REJECTED:
    "‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á",
  DIRECTOR_APPROVED:
    "‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
};

const AnnualStatusBadgeClass: Record<AnnualHeaderStatus, string> = {
  ASSESSOR_IN_PROGRESS: "bg-amber-100 text-amber-700 border-amber-200",
  AWAITING_DIRECTOR_REVIEW: "bg-blue-100 text-blue-700 border-blue-200",
  DIRECTOR_REJECTED: "bg-red-100 text-red-700 border-red-200",
  DIRECTOR_APPROVED: "bg-emerald-100 text-emerald-700 border-emerald-200",
};

/** ---------------- Page ---------------- */

export default function RiskAssessmentPlanningPage({
  fullWidth = false,
  className = "",
}: {
  fullWidth?: boolean;
  className?: string;
}) {
  const router = useRouter();
  const [isNavigating, setIsNavigating] = useState(false);
  const [tab, setTab] = useState<TabKey>("all");
  const [year, setYear] = useState<number>(2568);
  const [query] = useState("");
  const [status] = useState<
    "all" | "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô" | "‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß" | "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô"
  >("all");
  const [sortBy, setSortBy] = useState<"index" | "score" | "unit">("index");
  const [sortAsc, setSortAsc] = useState(true);
  const [page, setPage] = useState(1);
  const [expanded, setExpanded] = useState<Record<string, boolean>>({});
  const PAGE_SIZE = 200;

  const tabCats = categoriesForTab(tab);
  const apiCategory = tabCats && tabCats.length === 1 ? tabCats[0] : undefined;

  const { annualEvaluations, loading, error } = useAnnualEvaluations({
    fiscalYear: year,
    category: apiCategory, // "all" ‡πÅ‡∏•‡∏∞ "it" ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡πà‡∏á category ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ñ‡∏£‡∏ö
    search: query || undefined,
  });

  // ‡∏£‡∏ß‡∏°‡∏õ‡∏µ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (mock ‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤‡πÉ‡∏ä‡πâ‡∏õ‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)
  const fiscalYears = useMemo(() => {
    const set = new Set<number>();
    annualEvaluations.forEach((a) => set.add(a.fiscalYear));
    if (!set.size) set.add(year);
    return Array.from(set).sort((a, b) => b - a);
  }, [annualEvaluations, year]);

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const allGroups = useMemo<Group[]>(() => {
    const groups = buildGroups(annualEvaluations, tabCats);
    return groups;
  }, [annualEvaluations, tabCats]);

  // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ + ‡∏Å‡∏£‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ (‡∏ó‡∏≥‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏û‡∏≤‡πÄ‡∏£‡∏ô‡∏ï‡πå)
  const filteredGroups = useMemo(() => {
    let gs = [...allGroups];

    if (query) {
      const q = query.trim().toLowerCase();
      gs = gs.filter((g) =>
        [
          g.parent.index,
          g.parent.unit,
          g.parent.topic,
          g.parent.categoryName,
        ].some((t) => String(t).toLowerCase().includes(q))
      );
    }
    if (status !== "all") {
      gs = gs.filter((g) => g.parent.status === status);
    }

    // sort (‡∏ó‡∏µ‡πà‡∏û‡∏≤‡πÄ‡∏£‡∏ô‡∏ï‡πå)
    gs.sort((A, B) => {
      const a = A.parent;
      const b = B.parent;
      const dir = sortAsc ? 1 : -1;

      if (sortBy === "score") return (a.score - b.score) * dir;
      if (sortBy === "unit")
        return String(a.unit).localeCompare(String(b.unit)) * dir;

      // index ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏•‡πâ‡∏ß‡∏ô
      return (Number(a.index) - Number(b.index)) * dir;
    });

    // ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å sort ‡πÅ‡∏•‡πâ‡∏ß ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏µ‡πÄ‡∏•‡∏Ç index ‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á (1..N)
    gs.forEach((g, gi) => {
      const parentIndex = `${gi + 1}`;
      g.parent.index = parentIndex;
      g.children.forEach((c, cj) => {
        c.index = `${parentIndex}.${cj + 1}`;
      });
    });

    return gs;
  }, [allGroups, query, status, sortBy, sortAsc]);

  const shouldPaginate = filteredGroups.length > PAGE_SIZE;
  const totalPages = shouldPaginate
    ? Math.ceil(filteredGroups.length / PAGE_SIZE)
    : 1;
  const pageGroups = shouldPaginate
    ? filteredGroups.slice((page - 1) * PAGE_SIZE, page * PAGE_SIZE)
    : filteredGroups;
  type LegacyAnnualStatus =
    | "DRAFT"
    | "SUBMITTED"
    | "DIRECTOR_REVIEW"
    | "APPROVED"
    | "REJECTED";

  function normalizeAnnualHeaderStatus(
    s?: AnnualHeaderStatus | LegacyAnnualStatus | null
  ): AnnualHeaderStatus | undefined {
    if (!s) return undefined;
    switch (s) {
      case "DRAFT":
        return "ASSESSOR_IN_PROGRESS";
      case "SUBMITTED":
      case "DIRECTOR_REVIEW":
        return "AWAITING_DIRECTOR_REVIEW";
      case "REJECTED":
        return "DIRECTOR_REJECTED";
      case "APPROVED":
        return "DIRECTOR_APPROVED";
      default:
        return s as AnnualHeaderStatus;
    }
  }

  // header text (mock)
  const pageTitle = "‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏†‡∏≤‡∏¢‡πÉ‡∏ô";
  const subtitle = "‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á";
  const assessmentName = `‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏õ‡∏µ ${year}`;
  const rawAnnualStatus =
    (annualEvaluations[0]?.status as
      | AnnualHeaderStatus
      | LegacyAnnualStatus
      | undefined) ?? undefined;

  const currentAnnualStatus = normalizeAnnualHeaderStatus(rawAnnualStatus);
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  const allAssessmentCompleted = useMemo(() => {
    return allGroups.every((group) =>
      group.children.every((child) => child.score > 0)
    );
  }, [allGroups]);

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô
  const handleNavigateToResults = async () => {
    if (!allAssessmentCompleted) {
      const unassessedCount = allGroups.flatMap((g) => g.children).length -
        allGroups.flatMap((g) => g.children).filter((c) => c.score > 0).length;
      alert(`‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡πà‡∏≠‡∏ô (‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${unassessedCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)`);
      return;
    }

    setIsNavigating(true);
    try {
      // ‡πÄ‡∏û‡∏¥‡πà‡∏° delay ‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô loading
      await new Promise(resolve => setTimeout(resolve, 500));
      await router.push("/risk-assessment-results");
    } catch (error) {
      console.error('Navigation error:', error);
      setIsNavigating(false);
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (localStorage + database)
  const handleClearLocalStorage = async () => {
    const confirmed = confirm(
      "üóëÔ∏è ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô\n\n" +
        "‡∏à‡∏∞‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:\n" +
        "‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Browser (localStorage)\n" +
        "‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏•‡∏∞‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô\n" +
        "‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∞‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô\n\n" +
        "‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?"
    );

    if (!confirmed) return;

    try {
      // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å localStorage
      const keys = Object.keys(localStorage);
      keys.forEach((key) => {
        if (
          key.startsWith("assessment_status_") ||
          key.startsWith("assessment_data_")
        ) {
          localStorage.removeItem(key);
        }
      });
      console.log("üóëÔ∏è Cleared localStorage data");

      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô database
      const response = await fetch("/api/clear-data", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
      });

      if (!response.ok) {
        throw new Error("Failed to clear database data");
      }

      const result = await response.json();
      console.log("üóëÔ∏è Database clear result:", result);

      alert(
        "‚úÖ ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!\n\n" +
          `‚Ä¢ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• localStorage ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢\n` +
          `‚Ä¢ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: ${result.data?.clearedOverrides || 0} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n` +
          `‚Ä¢ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≠‡∏£‡πå‡∏°: ${result.data?.clearedForms || 0} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n\n` +
          "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤..."
      );

      // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
      window.location.reload();
    } catch (error) {
      console.error("Error clearing data:", error);
      const errorMessage =
        error instanceof Error ? error.message : "Unknown error";
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: " + errorMessage);
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Auto ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô
  const handleAutoAssess = async () => {
    try {
      const updates: Array<{
        id: string;
        score: number;
        grade: string;
      }> = [];

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏∏‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô
      allGroups.forEach((group) => {
        group.children.forEach((child) => {
          if (child.score <= 0) {
            // ‡∏™‡∏∏‡πà‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 20-85
            const randomScore = Math.floor(Math.random() * (85 - 20 + 1)) + 20;
            updates.push({
              id: child.id,
              score: randomScore,
              grade: gradeFromScore(randomScore),
            });
          }
        });
      });

      if (updates.length === 0) {
        alert("‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÅ‡∏•‡πâ‡∏ß");
        return;
      }

      // ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
      const confirmed = confirm(
        `ü§ñ Auto ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô\n\n` +
          `‡∏à‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô ${updates.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n` +
          `‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏∏‡πà‡∏°‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 20-85 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô\n\n` +
          `‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`
      );

      if (!confirmed) return;

      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
      const response = await fetch("/api/auto-assess", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ updates }),
      });

      if (!response.ok) {
        throw new Error("Failed to update assessments");
      }

      const result = await response.json();
      console.log("ü§ñ Auto assessment result:", result);

      // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
      alert(
        `ü§ñ Auto ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!\n\n` +
          `‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏° ${updates.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n` +
          `‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: ${Math.round(
            updates.reduce((sum, u) => sum + u.score, 0) / updates.length
          )} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô\n\n` +
          `‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß`
      );

      // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• SWR
      window.location.reload();
    } catch (error) {
      console.error("Error in auto assessment:", error);
      const errorMessage =
        error instanceof Error ? error.message : "Unknown error";
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ Auto ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô: " + errorMessage);
    }
  };

  // reset page ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô filter ‡∏´‡∏•‡∏±‡∏Å
  useEffect(() => setPage(1), [tab, year, query, status]);

  return (
    <div
      className={cn(
        fullWidth
          ? "w-full p-4 md:p-6 space-y-4"
          : "mx-auto max-w-[1200px] p-4 md:p-6 space-y-4",
        className
      )}
    >
      {/* Loading Overlay */}
      {isNavigating && (
        <div className="fixed inset-0 bg-black/20 backdrop-blur-sm z-50 flex items-center justify-center">
          <div className="bg-white rounded-lg p-6 shadow-xl border border-gray-200 min-w-[200px] text-center">
            <Loader2 className="h-8 w-8 animate-spin mx-auto mb-3 text-blue-600" />
            <p className="text-sm font-medium text-gray-900 mb-1">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î</p>
            <p className="text-xs text-gray-500">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô...</p>
          </div>
        </div>
      )}
      <div className="text-sm text-muted-foreground">
        ‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏†‡∏≤‡∏¢‡πÉ‡∏ô /{" "}
        <span className="text-sm text-foreground font-medium">{subtitle}</span>
      </div>

      <div className="flex items-center justify-between gap-3">
        <div className="flex items-center gap-3">
          <h1 className="text-xl md:text-2xl font-semibold">{pageTitle}</h1>
        </div>
      </div>

      <div className="flex items-center gap-2">
        <span className="text-sm text-muted-foreground">‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì</span>
        <Select
          value={String(year)}
          onValueChange={(v) => {
            const y = Number(v);
            setYear(y);
            setPage(1);
          }}
        >
          <SelectTrigger className="w-[120px]">
            <SelectValue />
          </SelectTrigger>
          <SelectContent>
            {fiscalYears.map((y) => (
              <SelectItem key={y} value={String(y)}>
                {y}
              </SelectItem>
            ))}
          </SelectContent>
        </Select>
      </div>

      <Card className="border-dashed">
        <CardHeader className="pb-3">
          <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-3">
            <CardTitle className="text-base md:text-lg font-medium">
              {assessmentName}
            </CardTitle>
            <div className="flex gap-2">
              <Button
                size="sm"
                variant="outline"
                className="rounded-md"
                onClick={handleAutoAssess}
                disabled={loading}
              >
                ü§ñ Auto ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô
              </Button>

              <Button
                size="sm"
                variant="outline"
                className="rounded-md text-red-600 border-red-300 hover:bg-red-50"
                onClick={handleClearLocalStorage}
                disabled={loading}
              >
                üóëÔ∏è ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
              </Button>

              {/* ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏Å‡πà‡∏≤ - ‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡πÑ‡∏ß‡πâ
              <Button
                asChild
                size="sm"
                className="rounded-md bg-indigo-600 hover:bg-indigo-700 text-white"
              >
                <Link href={"/risk-assessment-results"}>‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô</Link>
              </Button>
              */}

              <Button
                onClick={handleNavigateToResults}
                disabled={isNavigating}
                size="sm"
                className={cn(
                  "rounded-md text-white",
                  allAssessmentCompleted
                    ? "bg-indigo-600 hover:bg-indigo-700"
                    : "bg-gray-300 text-gray-500 cursor-not-allowed"
                )}
                title={
                  !allAssessmentCompleted
                    ? `‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡πà‡∏≠‡∏ô (‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${
                        allGroups.flatMap((g) => g.children).length -
                        allGroups
                          .flatMap((g) => g.children)
                          .filter((c) => c.score > 0).length
                      } ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)`
                    : undefined
                }
              >
                {isNavigating ? (
                  <>
                    <Loader2 className="h-4 w-4 animate-spin mr-2" />
                    ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...
                  </>
                ) : (
                  "‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô"
                )}
              </Button>
            </div>
          </div>
          <div className="space-y-2">
            <div className="flex items-center gap-2 text-sm">
              <Info className="h-4 w-4 text-muted-foreground" />
              <span className="font-medium text-foreground">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</span>
              {currentAnnualStatus ? (
                <Badge
                  variant="outline"
                  className={cn(
                    "rounded-full px-3",
                    AnnualStatusBadgeClass[currentAnnualStatus]
                  )}
                >
                  {AnnualStatusLabel[currentAnnualStatus]}
                </Badge>
              ) : (
                <span className="text-muted-foreground">-</span>
              )}
            </div>
          </div>
        </CardHeader>

        <CardContent className="space-y-3">
          {/* Tabs */}
          <div className="overflow-x-auto">
            <Tabs
              value={tab}
              onValueChange={(v) => {
                setTab(v as TabKey);
                setPage(1);
              }}
            >
              <TabsList className="mb-2 w-full justify-start bg-transparent h-auto p-0 border-b border-border">
                {Object.entries(TAB_LABELS).map(([k, label]) => (
                  <TabsTrigger
                    key={k}
                    value={k}
                    className="
                      rounded-none bg-transparent
                      px-0 md:px-2 py-3 text-sm font-medium
                      text-muted-foreground hover:text-foreground
                      border-b-2 border-transparent
                      data-[state=active]:text-primary
                      data-[state=active]:border-primary
                      focus-visible:outline-none
                    "
                  >
                    {label}
                  </TabsTrigger>
                ))}
              </TabsList>
            </Tabs>
          </div>

          {/* Table */}
          <div className="rounded-xl border overflow-hidden">
            <Table>
              <TableHeader>
                <TableRow className="bg-muted/50">
                  <TableHead className="w-[90px]">‡∏•‡∏≥‡∏î‡∏±‡∏ö</TableHead>
                  <TableHead>‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô</TableHead>
                  <TableHead className="align-middle !whitespace-normal break-words leading-snug">
                    <span className="block max-w-[18rem] md:max-w-[32rem]">
                      {DYNAMIC_HEAD[tab]}
                    </span>
                  </TableHead>
                  <TableHead className="w-[120px]">
                    <button
                      className="underline decoration-dotted"
                      onClick={() => {
                        setSortBy("score");
                        setSortAsc((v) => (sortBy === "score" ? !v : true));
                      }}
                    >
                      ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô
                    </button>
                  </TableHead>
                  <TableHead className="w-[80px]">‡πÄ‡∏Å‡∏£‡∏î</TableHead>
                  <TableHead className="w-[170px]">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•</TableHead>
                  <TableHead className="w-[64px] text-center"></TableHead>
                </TableRow>
              </TableHeader>

              <TableBody>
                {loading ? (
                  <TableRow>
                    <TableCell
                      colSpan={7}
                      className="h-24 text-center text-muted-foreground"
                    >
                      ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...
                    </TableCell>
                  </TableRow>
                ) : error ? (
                  <TableRow>
                    <TableCell
                      colSpan={7}
                      className="h-24 text-center text-red-600"
                    >
                      ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                    </TableCell>
                  </TableRow>
                ) : pageGroups.length === 0 ? (
                  <TableRow>
                    <TableCell
                      colSpan={7}
                      className="h-24 text-center text-muted-foreground"
                    >
                      ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                    </TableCell>
                  </TableRow>
                ) : (
                  pageGroups.map(({ parent, children }) => {
                    const isSingleton = children.length === 1;

                    if (isSingleton) {
                      const only = children[0];

                      // ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏Ç‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏à‡∏≤‡∏Å parent (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á .1)
                      const displayIndex = parent.index;

                      return (
                        <TableRow key={`single:${only.id}`}>
                          <TableCell className="font-mono text-xs md:text-sm">
                            {displayIndex}
                          </TableCell>
                          <TableCell className="whitespace-nowrap">
                            {only.unit}
                          </TableCell>
                          <TableCell className="text-muted-foreground align-top !whitespace-normal break-words">
                            <span
                              className="block line-clamp-2 md:line-clamp-3"
                              style={{
                                display: "-webkit-box",
                                WebkitBoxOrient: "vertical",
                                WebkitLineClamp: 2,
                                overflow: "hidden",
                              }}
                            >
                              {only.topic}
                            </span>
                          </TableCell>
                          <TableCell className="font-medium">
                            {only.score || "-"}
                          </TableCell>
                          <TableCell>
                            <GradeBadge grade={only.grade} />
                          </TableCell>
                          <TableCell>
                            <StatusBadge value={only.status} />
                          </TableCell>
                          <TableCell className="text-center">
                            <div className="flex justify-center gap-2">
                              {only.hasDoc && (
                                <Button
                                  asChild
                                  variant="ghost"
                                  size="icon"
                                  aria-label="‡∏Å‡∏£‡∏≠‡∏Å/‡∏î‡∏π‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£"
                                >
                                  <Link
                                    href={`/risk-assessment-form/${only.id}`}
                                  >
                                    <FileText className="h-4 w-4" />
                                  </Link>
                                </Button>
                              )}
                            </div>
                          </TableCell>
                        </TableRow>
                      );
                    }

                    // ‡∏Å‡∏£‡∏ì‡∏µ‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢ child (‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ã‡πâ‡∏≥) ‚Äî ‡πÅ‡∏™‡∏î‡∏á parent + expand
                    return (
                      <Fragment key={parent.id}>
                        {/* Parent row */}
                        <TableRow>
                          <TableCell className="font-mono text-xs md:text-sm">
                            {parent.index}
                          </TableCell>
                          <TableCell className="whitespace-nowrap">
                            {parent.unit}
                          </TableCell>
                          <TableCell className="text-muted-foreground align-top !whitespace-normal break-words">
                            <span
                              className="block line-clamp-2 md:line-clamp-3"
                              style={{
                                display: "-webkit-box",
                                WebkitBoxOrient: "vertical",
                                WebkitLineClamp: 2,
                                overflow: "hidden",
                              }}
                            >
                              {parent.topic}
                            </span>
                          </TableCell>
                          <TableCell className="font-medium">
                            {parent.score || "-"}
                          </TableCell>
                          <TableCell>
                            <GradeBadge grade={parent.grade} />
                          </TableCell>
                          <TableCell>
                            <StatusBadge value={parent.status} />
                          </TableCell>
                          <TableCell className="text-center">
                            <div className="flex justify-center gap-2">
                              <ExpandBtn
                                id={parent.id}
                                expanded={expanded}
                                setExpanded={setExpanded}
                              />
                            </div>
                          </TableCell>
                        </TableRow>

                        {/* Children rows */}
                        {expanded[parent.id] &&
                          children.map((c) => (
                            <TableRow key={c.id} className="bg-muted/30">
                              <TableCell className="font-mono text-xs md:text-sm">
                                {c.index}
                              </TableCell>
                              <TableCell className="whitespace-nowrap pl-6">
                                {c.unit}
                              </TableCell>
                              <TableCell className="text-muted-foreground align-top !whitespace-normal break-words">
                                <span
                                  className="block line-clamp-2 md:line-clamp-3"
                                  style={{
                                    display: "-webkit-box",
                                    WebkitBoxOrient: "vertical",
                                    WebkitLineClamp: 2,
                                    overflow: "hidden",
                                  }}
                                >
                                  {c.topic}
                                </span>
                              </TableCell>
                              <TableCell className="font-medium">
                                {c.score || "-"}
                              </TableCell>
                              <TableCell>
                                <GradeBadge grade={c.grade} />
                              </TableCell>
                              <TableCell>
                                <StatusBadge value={c.status} />
                              </TableCell>
                              <TableCell className="text-center">
                                <div className="flex justify-center gap-2">
                                  {c.hasDoc && (
                                    <Button
                                      asChild
                                      variant="ghost"
                                      size="icon"
                                      aria-label="‡∏Å‡∏£‡∏≠‡∏Å/‡∏î‡∏π‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£"
                                    >
                                      <Link
                                        href={`/risk-assessment-form/${c.id}`}
                                      >
                                        <FileText className="h-4 w-4" />
                                      </Link>
                                    </Button>
                                  )}
                                </div>
                              </TableCell>
                            </TableRow>
                          ))}
                      </Fragment>
                    );
                  })
                )}
              </TableBody>
            </Table>
          </div>

          {/* Pagination */}
          {shouldPaginate && (
            <div className="flex flex-col md:flex-row items-center justify-between gap-3 pt-2">
              <div className="text-sm text-muted-foreground">
                ‡πÅ‡∏™‡∏î‡∏á {pageGroups.length} ‡∏Å‡∏•‡∏∏‡πà‡∏° ‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î{" "}
                {filteredGroups.length} ‡∏Å‡∏•‡∏∏‡πà‡∏°
              </div>
              <div className="flex items-center gap-2">
                <Button
                  variant="outline"
                  size="sm"
                  disabled={page === 1}
                  onClick={() => setPage((p) => Math.max(1, p - 1))}
                >
                  ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
                </Button>
                <Popover>
                  <PopoverTrigger asChild>
                    <Button variant="outline" size="sm" className="gap-1">
                      ‡∏´‡∏ô‡πâ‡∏≤ {page}/{totalPages}{" "}
                      <ChevronDown className="h-4 w-4" />
                    </Button>
                  </PopoverTrigger>
                  <PopoverContent className="w-44" align="end">
                    <div className="grid grid-cols-4 gap-2">
                      {Array.from({ length: totalPages }).map((_, i) => (
                        <Button
                          key={i}
                          variant={i + 1 === page ? "default" : "outline"}
                          size="sm"
                          onClick={() => setPage(i + 1)}
                        >
                          {i + 1}
                        </Button>
                      ))}
                    </div>
                  </PopoverContent>
                </Popover>
                <Button
                  variant="outline"
                  size="sm"
                  disabled={page === totalPages}
                  onClick={() => setPage((p) => Math.min(totalPages, p + 1))}
                >
                  ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
                </Button>
              </div>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}

function ExpandBtn({
  id,
  expanded,
  setExpanded,
}: {
  id: string;
  expanded: Record<string, boolean>;
  setExpanded: React.Dispatch<React.SetStateAction<Record<string, boolean>>>;
}) {
  const isOpen = !!expanded[id];
  return (
    <Button
      variant="ghost"
      size="icon"
      aria-label="‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏¢‡πà‡∏≠‡∏¢"
      onClick={() => setExpanded((prev) => ({ ...prev, [id]: !prev[id] }))}
    >
      {isOpen ? (
        <ChevronUp className="h-4 w-4" />
      ) : (
        <ChevronDown className="h-4 w-4" />
      )}
    </Button>
  );
}
