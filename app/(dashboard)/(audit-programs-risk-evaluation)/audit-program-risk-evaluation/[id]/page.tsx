"use client";

import { useParams } from "next/navigation";
import { useMemo, useState, useEffect } from "react";
import { useAuditPrograms, updateProgramStatus } from "@/hooks/useAuditPrograms";
import DetailView from "@/components/features/audit-program-risk-evaluation/DetailView";
import type { AuditProgramRiskEvaluation, AuditActivityRisk } from "@/hooks/useAuditProgramRiskEvaluation";
import type { RiskFactorPickerValues } from "@/components/features/audit-program-risk-evaluation/popup/RiskFactorPickerModal";

export default function AuditProgramRiskEvaluationDetailPage() {
  const params = useParams<{ id: string }>();
  const id = Number(params.id);
  
  const { programs, isLoading, refetch } = useAuditPrograms();
  
  // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
  const [activityRisks, setActivityRisks] = useState<AuditActivityRisk[]>([]);
  const [hasStatusUpdated, setHasStatusUpdated] = useState(false);

  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å localStorage ‡πÄ‡∏°‡∏∑‡πà‡∏≠ component mount
  useEffect(() => {
    const savedRisks = localStorage.getItem(`audit-risks-${id}`);
    if (savedRisks) {
      try {
        const parsed = JSON.parse(savedRisks);
        setActivityRisks(parsed);
      } catch (error) {
        console.error('Error loading saved risks:', error);
      }
    }
  }, [id]);

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å (‡∏à‡∏≤‡∏Å PENDING ‡πÄ‡∏õ‡πá‡∏ô AUDITOR_ASSESSING)
  useEffect(() => {
    const updateStatusOnEntry = async () => {
      if (!programs || isLoading || hasStatusUpdated) return;
      
      const currentProgram = programs.find(p => p.id === id);
      if (currentProgram && currentProgram.status === "PENDING") {
        try {
          console.log(`üîÑ Updating status for program ${id} from PENDING to AUDITOR_ASSESSING`);
          await updateProgramStatus(id, "AUDITOR_ASSESSING");
          await refetch(); // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
          setHasStatusUpdated(true);
          
          // ‡πÅ‡∏™‡∏î‡∏á toast notification
          import('@/hooks/useToast').then(({ showToast }) => {
            showToast({
              title: "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á",
              description: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏õ‡πá‡∏ô '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á'",
              variant: "success",
              duration: 3000
            });
          });
        } catch (error) {
          console.error('Error updating program status:', error);
        }
      }
    };

    updateStatusOnEntry();
  }, [programs, isLoading, id, hasStatusUpdated, refetch]);
  
  const detail = useMemo((): AuditProgramRiskEvaluation | null => {
    if (!programs || isLoading) return null;
    const found = programs.find((p) => p.id === id);
    if (!found) return null;
    
    // ‡πÅ‡∏õ‡∏•‡∏á AuditProgram ‡πÄ‡∏õ‡πá‡∏ô AuditProgramRiskEvaluation
    return {
      ...found,
      AuditActivityRisks: activityRisks // ‡πÉ‡∏ä‡πâ state ‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏¢‡∏Å
    };
  }, [programs, id, isLoading, activityRisks]);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà
  const handleAddFactor = (values: RiskFactorPickerValues) => {
    const processValue = values.process || "";
    const riskFactorsValue = Array.isArray(values.dimension) ? values.dimension.join(",") : (values.dimension || "");
    const objectValue = values.riskFactor || "";

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥
    const isDuplicate = activityRisks.some(risk => 
      risk.processes === processValue && 
      risk.risk_factors === riskFactorsValue &&
      risk.object === objectValue
    );

    if (isDuplicate) {
      // ‡πÉ‡∏ä‡πâ dynamic import ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á server-side rendering issues
      import('@/hooks/useToast').then(({ showToast }) => {
        showToast({
          title: "‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô",
          description: "‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏á‡∏≤‡∏ô ‡∏î‡πâ‡∏≤‡∏ô ‡πÅ‡∏•‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô",
          variant: "warning",
          duration: 4000
        });
      });
      return;
    }

    const newRisk: AuditActivityRisk = {
      id: Date.now(), // ‡πÉ‡∏ä‡πâ timestamp ‡πÄ‡∏õ‡πá‡∏ô id ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
      processes: processValue,
      risk_factors: riskFactorsValue,
      object: objectValue,
      risks_assessment: [] // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ array ‡∏ß‡πà‡∏≤‡∏á
    };

    setActivityRisks(prev => {
      const updated = [...prev, newRisk];
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏õ‡∏¢‡∏±‡∏á localStorage
      localStorage.setItem(`audit-risks-${id}`, JSON.stringify(updated));
      
      // ‡πÅ‡∏™‡∏î‡∏á success toast
      import('@/hooks/useToast').then(({ showToast }) => {
        showToast({
          title: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
          description: "‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß",
          variant: "success",
          duration: 3000
        });
      });
      
      return updated;
    });
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á
  const handleDeleteFactor = (riskId: number) => {
    setActivityRisks(prev => {
      const updated = prev.filter(risk => risk.id !== riskId);
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏õ‡∏¢‡∏±‡∏á localStorage
      localStorage.setItem(`audit-risks-${id}`, JSON.stringify(updated));
      return updated;
    });
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
  const handleSave = async () => {
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á
    console.log('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á:', activityRisks);
    
    try {
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô COMPLETED ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÅ‡∏•‡πâ‡∏ß
      const hasAssessments = activityRisks.some(risk => 
        risk.risks_assessment && risk.risks_assessment.length > 0
      );
      
      if (hasAssessments) {
        console.log(`üîÑ Updating status for program ${id} to COMPLETED`);
        await updateProgramStatus(id, "COMPLETED");
        await refetch(); // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        
        import('@/hooks/useToast').then(({ showToast }) => {
          showToast({
            title: "‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á",
            description: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏õ‡πá‡∏ô '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô'",
            variant: "success",
            duration: 4000
          });
        });
      } else {
        import('@/hooks/useToast').then(({ showToast }) => {
          showToast({
            title: "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢",
            description: `‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á ${activityRisks.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß`,
            variant: "success",
            duration: 3000
          });
        });
      }
    } catch (error) {
      console.error('Error saving or updating status:', error);
      import('@/hooks/useToast').then(({ showToast }) => {
        showToast({
          title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
          description: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
          variant: "error",
          duration: 4000
        });
      });
    }
  };

  if (Number.isNaN(id)) {
    return (
      <div className="p-6 text-sm text-red-600">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á</div>
    );
  }

  if (isLoading) {
    return <div className="p-6 text-sm text-gray-600">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</div>;
  }

  if (!detail) {
    return (
      <div className="p-6">
        <p className="text-sm text-red-600">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</p>
      </div>
    );
  }

  return (
    <DetailView 
      detail={detail} 
      onAddFactor={handleAddFactor}
      onDeleteFactor={handleDeleteFactor}
      onSave={handleSave}
    />
  );
}
