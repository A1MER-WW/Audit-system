import { NextRequest, NextResponse } from "next/server";

// Import ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å inspector API
import { GET as InspectorGET } from "../risk-assessment-results/route";

// ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å Inspector (‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)
let submittedData: any = null;
let submissionStatus = "‡∏£‡∏≠‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤";

export async function GET(request: NextRequest) {
  try {
    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å Inspector ‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡πâ‡∏ô
    if (submittedData) {
      console.log("üìã Using submitted data from Inspector", {
        action: submittedData.action,
        dataCount: submittedData.data?.length || 0,
        hasReorder: !!submittedData.newOrder
      });

      const responseData = {
        ...submittedData.metadata,
        rowsByTab: submittedData.rowsByTab || {},
        statusLine: {
          label: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞",
          value: submissionStatus
        },
        submissionInfo: {
          action: submittedData.action,
          submissionTime: submittedData.metadata?.submissionTime || submittedData.metadata?.reorderTime,
          itemCount: submittedData.metadata?.totalItems || submittedData.data?.length
        }
      };

      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô reorder ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏•‡∏≥‡∏î‡∏±‡∏ö
      if (submittedData.action === "submit_reorder") {
        responseData.reorderInfo = {
          originalOrder: submittedData.originalOrder,
          newOrder: submittedData.newOrder,
          changedItem: submittedData.changedItem,
          reason: submittedData.reason,
          hasChanges: submittedData.hasChanges ?? (
            submittedData.originalOrder && submittedData.newOrder && 
            JSON.stringify(submittedData.originalOrder) !== JSON.stringify(submittedData.newOrder)
          ),
          reasonById: submittedData.reasonById || {}
        };
      }

      return NextResponse.json(responseData);
    }

    // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏á‡∏°‡∏≤ ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å inspector API
    const inspectorResponse = await InspectorGET(request);
    const inspectorData = await inspectorResponse.json();

    // ‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô "‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß" ‡∏´‡∏£‡∏∑‡∏≠ "‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥" ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Chief Inspector
    const chiefData = {
      ...inspectorData,
      statusLine: {
        label: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞",
        value: "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Inspector"
      },
      pageTitle: "‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô",
      subtitle: "‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á (Chief Inspector View)",
      assessmentName: `‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á ‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏õ‡∏µ ${new URLSearchParams(request.url.split('?')[1] || '').get('year') || new Date().getFullYear() + 543}`
    };

    return NextResponse.json(chiefData);
  } catch (error) {
    console.error("Chief Risk Assessment Results API error:", error);
    return NextResponse.json(
      { error: "Failed to fetch chief risk assessment results" },
      { status: 500 }
    );
  }
}

export async function POST(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const year = searchParams.get("year") || "2568";
    const body = await request.json();
    
    console.log("üì® Chief Risk Assessment - Received submission:", {
      year,
      action: body.action,
      dataLength: body.data?.length || 0,
      timestamp: new Date().toISOString()
    });

    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö reorder: ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÉ‡∏´‡∏°‡πà
    let orderedData = body.data;
    if (body.action === "submit_reorder" && body.newOrder && Array.isArray(body.data)) {
      console.log("üîÑ Reordering data according to new order:", {
        originalOrder: body.originalOrder,
        newOrder: body.newOrder,
        changedItem: body.changedItem,
        reason: body.reason
      });
      
      const dataMap = new Map(body.data.map((item: any) => [item.id, item]));
      orderedData = body.newOrder.map((id: string) => dataMap.get(id)).filter(Boolean);
      
      // ‡πÄ‡∏Å‡πá‡∏ö index ‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏ß‡πâ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ match ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      // orderedData ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏î‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏° newOrder ‡πÅ‡∏•‡πâ‡∏ß
      // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï index ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ match ‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°
      
      console.log("‚úÖ Data reordered successfully:", {
        originalCount: body.data.length,
        reorderedCount: orderedData.length,
        newOrder: body.newOrder,
        orderedDataIds: orderedData.map((item: any) => item.id)
      });
    }

    // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å Inspector
    submittedData = {
      action: body.action,
      year,
      tab: body.tab,
      data: orderedData, // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß
      originalOrder: body.originalOrder,
      newOrder: body.newOrder,
      changedItem: body.changedItem,
      reason: body.reason,
      hasChanges: body.hasChanges,
      reasonById: body.reasonById || {},
      metadata: body.metadata,
      // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà dashboard ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
      rowsByTab: orderedData ? { [body.tab]: orderedData } : {}
    };

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    if (body.action === "submit_reorder") {
      submissionStatus = "‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡πâ‡∏ß - ‡∏£‡∏≠‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤";
    } else {
      submissionStatus = "‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß - ‡∏£‡∏≠‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤";
    }

    console.log("‚úÖ Data stored successfully with status:", submissionStatus);
    
    return NextResponse.json({
      success: true,
      message: "‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
      timestamp: new Date().toISOString(),
      receivedData: {
        year,
        action: body.action,
        itemCount: orderedData?.length || 0,
        status: submissionStatus,
        reorderInfo: body.action === "submit_reorder" ? {
          changedItems: body.changedItem ? 1 : 0,
          reason: body.reason || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•"
        } : null
      }
    });
    
  } catch (error) {
    console.error("Error processing chief risk assessment submission:", error);
    return NextResponse.json(
      { 
        success: false, 
        error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" 
      },
      { status: 500 }
    );
  }
}
