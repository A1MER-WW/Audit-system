import { Row, TabKey } from "@/types/risk";

/** ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° type ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ü‡∏¥‡∏•‡∏î‡πå audit_category_name ‡πÉ‡∏´‡πâ‡∏Å‡πâ‡∏≠‡∏ô‡∏£‡∏ß‡∏° */
export type RowWithCategory = Row & {
  audit_category_name:
    | "‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô"
    | "‡∏á‡∏≤‡∏ô"
    | "‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£"
    | "‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏´‡∏•‡∏∑‡πà‡∏≠‡∏°‡∏õ‡∏µ"
    | "‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°"
    | "‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏á‡∏≤‡∏ô"
    | "IT ‡πÅ‡∏•‡∏∞ Non-IT";
};

const SARABUN_UNITS: string[] = [
  "‡∏™‡∏•‡∏Å.",
  "‡∏®‡∏Å‡∏ä.",
  "‡∏Å‡∏ô‡∏ú.",
  "‡∏™‡∏ß‡∏®.",
  "‡∏®‡∏™‡∏™.",
  "‡∏®‡∏õ‡∏ú.",
  "‡∏Å‡∏®‡∏õ.",
  ...Array.from({ length: 12 }, (_, i) => `‡∏™‡∏®‡∏ó.${i + 1}`),
];

export const SCORE_RULES = { excellentMin: 80, highMin: 60, mediumMin: 40, lowMin: 20 };
export function toGrade(score: number): "E" | "H" | "M" | "L" | "N" {
  if (score === undefined || score === null) return "N";
  if (score >= 80) return "E";
  if (score >= 60) return "H";
  if (score >= 40) return "M";
  if (score >= 20) return "L";
  return "N";
}
export function scoreFromIndex(idx: string): number {
  const n = Number(idx.replace(/\D/g, "")) || 0;
  switch (n % 7) {
    case 0:
      return 65;
    case 1:
      return 56;
    case 2:
      return 55;
    case 3:
      return 54;
    case 4:
      return 51;
    case 5:
      return 44;
    default:
      return 10;
  }
}

export function evaluateRows(rows: Row[]): Row[] {
  // ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô/‡πÄ‡∏Å‡∏£‡∏î ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏û‡∏≤‡πÄ‡∏£‡∏ô‡∏ï‡πå = max ‡∏•‡∏π‡∏Å
  const withScores = rows.map((r) => {
    const s = r.score > 0 ? r.score : scoreFromIndex(r.index);
    return {
      ...r,
      score: s,
      grade: toGrade(s),
      status: s > 0 ? "‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß" : r.status,
    };
  });

  const byIndex = new Map(withScores.map((r) => [r.index, r]));
  const parents = withScores.filter((r) => !r.index.includes("."));
  for (const p of parents) {
    const children = withScores.filter((c) =>
      c.index.startsWith(p.index + ".")
    );
    if (children.length) {
      const maxChild = Math.max(...children.map((c) => c.score || 0));
      const score = Math.max(p.score || 0, maxChild);
      byIndex.set(p.index, {
        ...p,
        score,
        grade: toGrade(score),
        status: "‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß",
      });
    }
  }

  return Array.from(byIndex.values()).sort((a, b) => {
    const A = a.index.split(".").map(Number);
    const B = b.index.split(".").map(Number);
    return A[0] !== B[0] ? A[0] - B[0] : (A[1] || 0) - (B[1] || 0);
  });
}

/* -------------------------------------------------------
   ‚úÖ ‡∏Å‡πâ‡∏≠‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (ALL) + ‡∏°‡∏µ audit_category_name
   ------------------------------------------------------- */

/** ‡∏õ‡πâ‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î (‡πÑ‡∏ó‡∏¢) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏õ‡∏∞‡πÉ‡∏ô audit_category_name */
const CATEGORY_LABELS = {
  unit: "‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô",
  work: "‡∏á‡∏≤‡∏ô",
  project: "‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£",
  carry: "‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏´‡∏•‡∏∑‡πà‡∏≠‡∏°‡∏õ‡∏µ",
  activity: "‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°",
  process: "‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏á‡∏≤‡∏ô",
  it: "IT ‡πÅ‡∏•‡∏∞ Non-IT",
} as const;

/** ‡πÉ‡∏™‡πà‡∏õ‡πâ‡∏≤‡∏¢ audit_category_name ‡πÉ‡∏´‡πâ‡πÅ‡∏ñ‡∏ß */
function tagCategory(
  rows: Row[],
  cat: keyof typeof CATEGORY_LABELS
): RowWithCategory[] {
  const label = CATEGORY_LABELS[cat];
  return rows.map((r) => ({ ...r, audit_category_name: label }));
}

/** ‚úÖ ‡∏Å‡πâ‡∏≠‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏ó‡∏∏‡∏Å‡∏ó‡∏µ‡πà */
export function buildAllRowsRaw(): RowWithCategory[] {
  const unit = tagCategory(buildUnitRows(), "unit");
  const work = tagCategory(buildWorkRows(), "work");
  const project = tagCategory(buildProjectRows(), "project");
  const carry = tagCategory(buildCarryRows(), "carry");
  const activity = tagCategory(buildActivityRows(), "activity");
  const process = tagCategory(buildProcessRows(), "process");
  const it = tagCategory(buildItRows(), "it");

  // ‡∏´‡∏°‡∏ß‡∏î process / it ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ mock ‡πÅ‡∏¢‡∏Å‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
  // ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏à‡∏£‡∏¥‡∏á ‡∏Ñ‡πà‡∏≠‡∏¢‡πÄ‡∏ï‡∏¥‡∏° buildProcessRows(), buildItRows() ‡πÅ‡∏•‡πâ‡∏ß tagCategory ‡πÄ‡∏û‡∏¥‡πà‡∏°
  const all = [
    ...unit,
    ...work,
    ...project,
    ...carry,
    ...activity,
    ...process,
    ...it,
  ];

  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° index
  all.sort((a, b) => {
    const A = a.index.split(".").map(Number);
    const B = b.index.split(".").map(Number);
    return A[0] !== B[0] ? A[0] - B[0] : (A[1] || 0) - (B[1] || 0);
  });
  return all;
}

/** üîÅ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏î‡∏¥‡∏°: ‡πÅ‡∏õ‡∏•‡∏á ‚Äú‡∏Å‡πâ‡∏≠‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‚Äù ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô rowsByTab (‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏à‡∏∏‡∏î‡∏≠‡∏∑‡πà‡∏ô‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÄ‡∏î‡∏¥‡∏°) */
export function buildRowsByTabRaw(): Record<Exclude<TabKey, "all">, Row[]> {
  const all = buildAllRowsRaw();
  const pick = (label: RowWithCategory["audit_category_name"]) =>
    all.filter((r) => r.audit_category_name === label);

  return {
    unit: pick(CATEGORY_LABELS.unit),
    work: pick(CATEGORY_LABELS.work),
    project: pick(CATEGORY_LABELS.project),
    carry: pick(CATEGORY_LABELS.carry),
    activity: pick(CATEGORY_LABELS.activity),
    process: pick(CATEGORY_LABELS.process), // ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏ß‡πà‡∏≤‡∏á (‡πÑ‡∏°‡πà‡∏°‡∏µ mock)
    it: pick(CATEGORY_LABELS.it), // ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏ß‡πà‡∏≤‡∏á (‡πÑ‡∏°‡πà‡∏°‡∏µ mock)
  };
}

/** ‡πÉ‡∏ä‡πâ‡∏Å‡πâ‡∏≠‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Å‡∏ß‡πà‡∏≤) */
export function findRowById(id: string): Row | undefined {
  const all = buildAllRowsRaw();
  return all.find((r) => r.id === id);
}

/* -------------------------------------------------------
   ‚úÖ Mock builders (‡πÄ‡∏î‡∏¥‡∏°) ‚Äî ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏Ñ‡πà‡∏™‡πà‡∏ß‡∏ô "‡∏á‡∏≤‡∏ô" ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô 1‚Äì19 + 20++
   ------------------------------------------------------- */

function buildWorkRows(): Row[] {
  const mk = (idx: number, unit: string, work: string): Row => ({
    id: String(idx),
    index: String(idx),
    unit,
    mission: "-",
    work,
    project: "-",
    carry: "-",
    activity: "-",
    process: "-",
    system: "-",
    itType: "-",
    score: 0,
    grade: "-",
    status: "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô",
    hasDoc: true,
  });

  // 1‚Äì3 : ‡∏á‡∏≤‡∏ô‡∏™‡∏≤‡∏£‡∏ö‡∏£‡∏£‡∏ì (3 ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÅ‡∏£‡∏Å)
  const block1 = SARABUN_UNITS.slice(0, 3).map((u, i) =>
    mk(i + 1, u, "‡∏á‡∏≤‡∏ô‡∏™‡∏≤‡∏£‡∏ö‡∏£‡∏£‡∏ì")
  );

  // 4‚Äì6 : ‡∏á‡∏≤‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞
  const defs = [
    { unit: "‡∏™‡∏•‡∏Å.", work: "‡∏á‡∏≤‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•" },
    {
      unit: "‡∏Å‡∏û‡∏£./‡∏™‡∏•‡∏Å./‡∏®‡∏Å‡∏ä./‡∏Å‡∏ô‡∏ú./‡∏™‡∏ß‡∏®./‡∏®‡∏™‡∏™./‡∏®‡∏õ‡∏ú./‡∏Å‡∏®‡∏õ./‡∏™‡∏®‡∏ó.1-12",
      work: "‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ ‡πÅ‡∏•‡∏∞‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì",
    },
    { unit: "‡∏®‡∏™‡∏™.", work: "‡∏á‡∏≤‡∏ô‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏™‡∏≤‡∏£‡∏™‡∏ô‡πÄ‡∏ó‡∏®" },
  ];
  const block2 = defs.map((t, i) => mk(4 + i, t.unit, t.work));

  return [...block1, ...block2]; // 1‚Äì6
}

function buildUnitRows(): Row[] {
  const mk = (idx: number, mission: string, unit = "‡∏Å‡∏û‡∏£."): Row => ({
    id: String(idx),
    index: String(idx),
    unit,
    mission,
    work: "-",
    project: "-",
    carry: "-",
    activity: "-",
    process: "-",
    system: "-",
    itType: "-",
    score: 0,
    grade: "-",
    status: "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô",
    hasDoc: true,
  });

  return [
    mk(7, "‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏†‡∏≤‡∏Ñ‡∏£‡∏±‡∏ê"),
    mk(8, "‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£"),
    mk(9, "‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ò‡∏£‡∏£‡∏°‡∏≤‡∏†‡∏¥‡∏ö‡∏≤‡∏•‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∏‡∏ì‡∏ò‡∏£‡∏£‡∏°"),
  ];
}

function buildProjectRows(): Row[] {
  const mk = (idx: number, unit: string, project: string): Row => ({
    id: String(idx),
    index: String(idx),
    unit,
    mission: "-",
    work: "-",
    project,
    carry: "-",
    activity: "-",
    process: "-",
    system: "-",
    itType: "-",
    score: 0,
    grade: "-",
    status: "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô",
    hasDoc: true,
  });

  return [
    mk(10, "‡∏®‡∏Å‡∏ä.", "‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏Å‡∏¥‡∏à‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏©‡∏ï‡∏£"),
    mk(11, "‡∏®‡∏™‡∏™.", "‡∏¢‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏ú‡∏•‡∏ú‡∏•‡∏¥‡∏ï"),
    mk(12, "‡∏Å‡∏ô‡∏ú.", "‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á‡πÅ‡∏•‡∏∞‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏†‡∏±‡∏¢‡∏û‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏©‡∏ï‡∏£"),
  ];
}

function buildCarryRows(): Row[] {
  const mk = (idx: number, unit: string, carry: string): Row => ({
    id: String(idx),
    index: String(idx),
    unit,
    mission: "-",
    work: "-",
    project: "-",
    carry,
    activity: "-",
    process: "-",
    system: "-",
    itType: "-",
    score: 0,
    grade: "-",
    status: "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô",
    hasDoc: true,
  });

  return [
    mk(13, "‡∏®‡∏™‡∏™.", "‡∏Å‡∏±‡∏ô‡πÄ‡∏á‡∏¥‡∏ô: ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Ñ‡∏•‡∏±‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏≤‡∏á"),
    mk(14, "‡∏™‡∏•‡∏Å.", "‡∏Å‡∏±‡∏ô‡πÄ‡∏á‡∏¥‡∏ô: ‡∏à‡∏±‡∏î‡∏ã‡∏∑‡πâ‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏£‡∏ß‡∏à"),
    mk(15, "‡∏Å‡∏®‡∏õ.", "‡∏Å‡∏±‡∏ô‡πÄ‡∏á‡∏¥‡∏ô: ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏≠‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ó‡∏£‡∏≠‡∏ô‡∏¥‡∏Å‡∏™‡πå"),
  ];
}

function buildActivityRows(): Row[] {
  const mk = (idx: number, unit: string, activity: string): Row => ({
    id: String(idx),
    index: String(idx),
    unit,
    mission: "-",
    work: "-",
    project: "-",
    carry: "-",
    activity,
    process: "-",
    system: "-",
    itType: "-",
    score: 0,
    grade: "-",
    status: "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô",
    hasDoc: true,
  });

  return [
    mk(16, "‡∏®‡∏™‡∏™.", "‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"),
    mk(17, "‡∏™‡∏ß‡∏®.", "‡∏ß‡∏¥‡∏à‡∏±‡∏¢‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏ó‡∏≥‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÄ‡∏ä‡∏¥‡∏á‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢"),
    mk(18, "‡∏®‡∏õ‡∏ú.", "‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞"),
  ];
}
function buildProcessRows(): Row[] {
  const mk = (idx: number, unit: string, process: string): Row => ({
    id: String(idx),
    index: String(idx),
    unit,
    mission: "-",
    work: "-",
    project: "-",
    carry: "-",
    activity: "-",
    process,
    system: "-",
    itType: "-",
    score: 0,
    grade: "-",
    status: "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô",
    hasDoc: true,
  });

  return [
    mk(19, "‡∏Å‡∏û‡∏£.", "‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏á‡∏≤‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û"),
    mk(20, "‡∏®‡∏Å‡∏ä.", "‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏á‡∏≤‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"),
  ];
}

function buildItRows(): Row[] {
  const mk = (
    idx: number,
    unit: string,
    system: string,
    itType: "IT" | "Non-IT"
  ): Row => ({
    id: String(idx),
    index: String(idx),
    unit,
    mission: "-",
    work: "-",
    project: "-",
    carry: "-",
    activity: "-",
    process: "-",
    system,
    itType,
    score: 0,
    grade: "-",
    status: "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô",
    hasDoc: true,
  });

  return [
    mk(21, "‡∏®‡∏™‡∏™.", "‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏≤‡∏á", "IT"),
    mk(22, "‡∏™‡∏•‡∏Å.", "‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≤‡∏£‡∏ö‡∏£‡∏£‡∏ì‡∏≠‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ó‡∏£‡∏≠‡∏ô‡∏¥‡∏Å‡∏™‡πå", "Non-IT"),
  ];
}
