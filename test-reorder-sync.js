/**
 * р╣Др╕Яр╕ер╣Мр╕Чр╕Фр╕кр╕нр╕Ър╕Бр╕▓р╕гр╕Лр╕┤р╕Зр╕Др╣Мр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕гр╕░р╕лр╕зр╣Ир╕▓р╕Зр╕лр╕Щр╣Йр╕▓ risk-assessment-results 
 * р╣Бр╕ер╕░ overview-of-the-evaluation-results р╕кр╕│р╕лр╕гр╕▒р╕Ър╣Бр╕Чр╣Зр╕Ъ "р╕Ьр╕ер╕Бр╕▓р╕гр╕Ир╕▒р╕Фр╕ер╕│р╕Фр╕▒р╕Ър╕Др╕зр╕▓р╕бр╣Ар╕кр╕╡р╣Ир╕вр╕З"
 */

console.log("ЁЯзк р╣Ар╕гр╕┤р╣Ир╕бр╕Чр╕Фр╕кр╕нр╕Ър╕Бр╕▓р╕гр╕Лр╕┤р╕Зр╕Др╣Мр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕ер╕│р╕Фр╕▒р╕Ър╕Др╕зр╕▓р╕бр╣Ар╕кр╕╡р╣Ир╕вр╕З...\n");

// р╕Ир╕│р╕ер╕нр╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Чр╕╡р╣Ир╕кр╣Ир╕Зр╕Ир╕▓р╕Б Inspector (р╕лр╕Щр╣Йр╕▓ risk-assessment-results)
const mockInspectorSubmission = {
  action: "submit_reorder",
  year: "2568",
  tab: "work",
  originalOrder: ["w1", "w2", "w3", "w4"],
  newOrder: ["w3", "w1", "w4", "w2"], // р╕Ир╕▒р╕Фр╕ер╕│р╕Фр╕▒р╕Ър╣Гр╕лр╕бр╣И
  changedItem: "w3",
  reason: "р╕Ир╕▒р╕Фр╕ер╕│р╕Фр╕▒р╕Ър╕Хр╕▓р╕бр╕гр╕░р╕Фр╕▒р╕Ър╕Др╕зр╕▓р╕бр╣Ар╕кр╕╡р╣Ир╕вр╕Зр╕кр╕╣р╕Зр╕кр╕╕р╕Фр╕Бр╣Ир╕нр╕Щ",
  hasChanges: true,
  reasonById: {
    "w3": "р╕Ир╕▒р╕Фр╣Гр╕лр╣Йр╣Ар╕Ыр╣Зр╕Щр╕ер╕│р╕Фр╕▒р╕Ър╣Бр╕гр╕Бр╣Ар╕Щр╕╖р╣Ир╕нр╕Зр╕Ир╕▓р╕Бр╕бр╕╡р╕Ьр╕ер╕Бр╕гр╕░р╕Чр╕Ър╕кр╕╣р╕З",
    "w1": "р╕ер╕│р╕Фр╕▒р╕Ър╕Чр╕╡р╣Ир╕кр╕нр╕З - р╕Др╕зр╕▓р╕бр╣Ар╕кр╕╡р╣Ир╕вр╕Зр╕гр╕░р╕Фр╕▒р╕Ър╕Бр╕ер╕▓р╕З",
    "w4": "р╕ер╕│р╕Фр╕▒р╕Ър╕Чр╕╡р╣Ир╕кр╕▓р╕б - р╕Хр╣Йр╕нр╕Зр╕Хр╕┤р╕Фр╕Хр╕▓р╕б",
    "w2": "р╕ер╕│р╕Фр╕▒р╕Ър╕кр╕╕р╕Фр╕Чр╣Йр╕▓р╕в - р╕Др╕зр╕▓р╕бр╣Ар╕кр╕╡р╣Ир╕вр╕Зр╕Хр╣Ир╕│"
  },
  data: [
    {
      id: "w3",
      index: "3",
      unit: "р╕ир╕Бр╕к.",
      work: "р╕Зр╕▓р╕Щр╕Ър╕гр╕┤р╕лр╕▓р╕гр╕Зр╕▓р╕Щр╕Ър╕╕р╕Др╕Др╕е",
      score: 85,
      grade: "E",
      status: "р╕Ыр╕гр╕░р╣Ар╕бр╕┤р╕Щр╣Бр╕ер╣Йр╕з"
    },
    {
      id: "w1", 
      index: "1",
      unit: "р╕кр╕ер╕Б.",
      work: "р╕бр╕▓р╕Хр╕гр╕Бр╕▓р╕гр╕Др╕зр╕Ър╕Др╕╕р╕бр╕Бр╕▓р╕гр╣Гр╕Кр╣Йр╕Зр╕Ър╕Ыр╕гр╕░р╕бр╕▓р╕У",
      score: 72,
      grade: "H",
      status: "р╕Ыр╕гр╕░р╣Ар╕бр╕┤р╕Щр╣Бр╕ер╣Йр╕з"
    },
    {
      id: "w4",
      index: "4", 
      unit: "р╕ир╕кр╕Ч.1",
      work: "р╕Зр╕▓р╕Щр╕кр╕▓р╕гр╕Ър╕гр╕гр╕У",
      score: 46,
      grade: "M",
      status: "р╕Ыр╕гр╕░р╣Ар╕бр╕┤р╕Щр╣Бр╕ер╣Йр╕з"
    },
    {
      id: "w2",
      index: "2",
      unit: "р╕Кр╕Юр╕Щ.",
      work: "р╕Зр╕▓р╕Щр╕Юр╕▒р╕кр╕Фр╕╕",
      score: 22,
      grade: "L", 
      status: "р╕Ыр╕гр╕░р╣Ар╕бр╕┤р╕Щр╣Бр╕ер╣Йр╕з"
    }
  ],
  metadata: {
    pageTitle: "р╕зр╕▓р╕Зр╣Бр╕Ьр╕Щр╕Зр╕▓р╕Щр╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕ар╕▓р╕вр╣Гр╕Щ",
    subtitle: "р╕Бр╕▓р╕гр╕Ыр╕гр╕░р╣Ар╕бр╕┤р╕Щр╕Др╕зр╕▓р╕бр╣Ар╕кр╕╡р╣Ир╕вр╕Зр╣Бр╕ер╕░р╕Бр╕▓р╕гр╕Ир╕▒р╕Фр╕ер╕│р╕Фр╕▒р╕Ър╕Др╕зр╕▓р╕бр╣Ар╕кр╕╡р╣Ир╕вр╕З",
    assessmentName: "р╕Ьр╕ер╕Бр╕▓р╕гр╕Ыр╕гр╕░р╣Ар╕бр╕┤р╕Щр╕Др╕зр╕▓р╕бр╣Ар╕кр╕╡р╣Ир╕вр╕З р╣Бр╕Ьр╕Щр╕Бр╕▓р╕гр╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Ыр╕гр╕░р╕Ир╕│р╕Ыр╕╡ 2568",
    totalItems: 4,
    reorderTime: new Date().toISOString(),
    allTabsData: {
      work: [
        { id: "w3", index: "3", unit: "р╕ир╕Бр╕к.", work: "р╕Зр╕▓р╕Щр╕Ър╕гр╕┤р╕лр╕▓р╕гр╕Зр╕▓р╕Щр╕Ър╕╕р╕Др╕Др╕е", score: 85, grade: "E" },
        { id: "w1", index: "1", unit: "р╕кр╕ер╕Б.", work: "р╕бр╕▓р╕Хр╕гр╕Бр╕▓р╕гр╕Др╕зр╕Ър╕Др╕╕р╕бр╕Бр╕▓р╕гр╣Гр╕Кр╣Йр╕Зр╕Ър╕Ыр╕гр╕░р╕бр╕▓р╕У", score: 72, grade: "H" },
        { id: "w4", index: "4", unit: "р╕ир╕кр╕Ч.1", work: "р╕Зр╕▓р╕Щр╕кр╕▓р╕гр╕Ър╕гр╕гр╕У", score: 46, grade: "M" },
        { id: "w2", index: "2", unit: "р╕Кр╕Юр╕Щ.", work: "р╕Зр╕▓р╕Щр╕Юр╕▒р╕кр╕Фр╕╕", score: 22, grade: "L" }
      ],
      all: [
        { id: "w3", index: "3", unit: "р╕ир╕Бр╕к.", work: "р╕Зр╕▓р╕Щр╕Ър╕гр╕┤р╕лр╕▓р╕гр╕Зр╕▓р╕Щр╕Ър╕╕р╕Др╕Др╕е", score: 85, grade: "E" },
        { id: "w1", index: "1", unit: "р╕кр╕ер╕Б.", work: "р╕бр╕▓р╕Хр╕гр╕Бр╕▓р╕гр╕Др╕зр╕Ър╕Др╕╕р╕бр╕Бр╕▓р╕гр╣Гр╕Кр╣Йр╕Зр╕Ър╕Ыр╕гр╕░р╕бр╕▓р╕У", score: 72, grade: "H" },
        { id: "w4", index: "4", unit: "р╕ир╕кр╕Ч.1", work: "р╕Зр╕▓р╕Щр╕кр╕▓р╕гр╕Ър╕гр╕гр╕У", score: 46, grade: "M" },
        { id: "w2", index: "2", unit: "р╕Кр╕Юр╕Щ.", work: "р╕Зр╕▓р╕Щр╕Юр╕▒р╕кр╕Фр╕╕", score: 22, grade: "L" }
      ]
    }
  }
};

console.log("ЁЯУд р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Чр╕╡р╣Ир╕кр╣Ир╕Зр╕Ир╕▓р╕Б Inspector:");
console.log("- р╕Бр╕▓р╕гр╕Бр╕гр╕░р╕Чр╕│:", mockInspectorSubmission.action);
console.log("- р╕ер╕│р╕Фр╕▒р╕Ър╣Ар╕Фр╕┤р╕б:", mockInspectorSubmission.originalOrder);
console.log("- р╕ер╕│р╕Фр╕▒р╕Ър╣Гр╕лр╕бр╣И:", mockInspectorSubmission.newOrder);
console.log("- р╕бр╕╡р╕Бр╕▓р╕гр╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щр╣Бр╕Ыр╕ер╕З:", mockInspectorSubmission.hasChanges);
console.log("- р╣Ар╕лр╕Хр╕╕р╕Ьр╕ер╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф:", Object.keys(mockInspectorSubmission.reasonById).length, "р╕гр╕▓р╕вр╕Бр╕▓р╕г");

// р╕Ир╕│р╕ер╕нр╕Зр╕Бр╕▓р╕гр╕Ыр╕гр╕░р╕бр╕зр╕ер╕Ьр╕ер╕Чр╕╡р╣И Chief API
console.log("\nЁЯФД р╕Бр╕гр╕░р╕Ър╕зр╕Щр╕Бр╕▓р╕гр╕Ыр╕гр╕░р╕бр╕зр╕ер╕Ьр╕ер╕Чр╕╡р╣И Chief API:");

// 1. р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Бр╕▓р╕гр╕Ир╕▒р╕Фр╕ер╕│р╕Фр╕▒р╕Ър╣Гр╕лр╕бр╣И
const isReorderAction = mockInspectorSubmission.action === "submit_reorder";
console.log("1. р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Ыр╕гр╕░р╣Ар╕ар╕Чр╕Бр╕▓р╕гр╕Бр╕гр╕░р╕Чр╕│:", isReorderAction ? "тЬЕ р╣Ар╕Ыр╣Зр╕Щр╕Бр╕▓р╕гр╕Ир╕▒р╕Фр╕ер╕│р╕Фр╕▒р╕Ър╣Гр╕лр╕бр╣И" : "тЭМ р╣Др╕бр╣Ир╣Гр╕Кр╣Ир╕Бр╕▓р╕гр╕Ир╕▒р╕Фр╕ер╕│р╕Фр╕▒р╕Ър╣Гр╕лр╕бр╣И");

if (isReorderAction) {
  // 2. р╕Ир╕▒р╕Фр╣Ар╕гр╕╡р╕вр╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Хр╕▓р╕бр╕ер╕│р╕Фр╕▒р╕Ър╣Гр╕лр╕бр╣И
  const dataMap = new Map(mockInspectorSubmission.data.map(item => [item.id, item]));
  const reorderedData = mockInspectorSubmission.newOrder.map(id => dataMap.get(id)).filter(Boolean);
  
  console.log("2. р╕Ир╕▒р╕Фр╣Ар╕гр╕╡р╕вр╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Гр╕лр╕бр╣И:");
  console.log("   - р╕ер╕│р╕Фр╕▒р╕Ър╣Гр╕лр╕бр╣И:", reorderedData.map(item => `${item.id}(${item.work})`));
  
  // 3. р╕нр╕▒р╕Юр╣Ар╕Фр╕Ч rowsByTab
  let rowsByTab = { ...mockInspectorSubmission.metadata.allTabsData };
  
  if (mockInspectorSubmission.tab && rowsByTab[mockInspectorSubmission.tab]) {
    const tabDataMap = new Map(rowsByTab[mockInspectorSubmission.tab].map(item => [item.id, item]));
    const reorderedTabData = mockInspectorSubmission.newOrder.map(id => tabDataMap.get(id)).filter(Boolean);
    rowsByTab[mockInspectorSubmission.tab] = reorderedTabData;
    
    console.log("3. р╕нр╕▒р╕Юр╣Ар╕Фр╕Чр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Бр╕Чр╣Зр╕Ъ:", mockInspectorSubmission.tab);
    console.log("   - р╕гр╕▓р╕вр╕Бр╕▓р╕гр╣Гр╕лр╕бр╣И:", reorderedTabData.length, "р╕гр╕▓р╕вр╕Бр╕▓р╕г");
  }
  
  if (rowsByTab["all"]) {
    const allDataMap = new Map(rowsByTab["all"].map(item => [item.id, item]));
    const reorderedAllData = mockInspectorSubmission.newOrder.map(id => allDataMap.get(id)).filter(Boolean);
    rowsByTab["all"] = reorderedAllData;
    
    console.log("4. р╕нр╕▒р╕Юр╣Ар╕Фр╕Чр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Бр╕Чр╣Зр╕Ъ 'all':");
    console.log("   - р╕гр╕▓р╕вр╕Бр╕▓р╕гр╣Гр╕лр╕бр╣И:", reorderedAllData.length, "р╕гр╕▓р╕вр╕Бр╕▓р╕г");
  }
  
  // 4. р╕кр╕гр╣Йр╕▓р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕е response р╕кр╕│р╕лр╕гр╕▒р╕Ъ Chief Inspector
  const chiefResponse = {
    rowsByTab: rowsByTab,
    statusLine: {
      label: "р╕кр╕Цр╕▓р╕Щр╕░",
      value: "р╣Др╕Фр╣Йр╕гр╕▒р╕Ър╕Бр╕▓р╕гр╕Ир╕▒р╕Фр╕ер╕│р╕Фр╕▒р╕Ър╕Др╕зр╕▓р╕бр╣Ар╕кр╕╡р╣Ир╕вр╕Зр╣Гр╕лр╕бр╣Ир╣Бр╕ер╣Йр╕з - р╕гр╕нр╕Юр╕┤р╕Ир╕▓р╕гр╕Ур╕▓"
    },
    submissionInfo: {
      action: mockInspectorSubmission.action,
      submissionTime: mockInspectorSubmission.metadata.reorderTime,
      itemCount: reorderedData.length
    },
    reorderInfo: {
      originalOrder: mockInspectorSubmission.originalOrder,
      newOrder: mockInspectorSubmission.newOrder,
      changedItem: mockInspectorSubmission.changedItem,
      reason: mockInspectorSubmission.reason,
      hasChanges: mockInspectorSubmission.hasChanges,
      reasonById: mockInspectorSubmission.reasonById
    }
  };
  
  console.log("\nЁЯУЛ р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Чр╕╡р╣Ир╕кр╣Ир╕Зр╣Др╕Ыр╕вр╕▒р╕З Chief Inspector:");
  console.log("- р╕бр╕╡р╕Вр╣Йр╕нр╕бр╕╣р╕е rowsByTab:", !!chiefResponse.rowsByTab);
  console.log("- р╣Бр╕Чр╣Зр╕Ър╕Чр╕╡р╣Ир╕бр╕╡р╕Вр╣Йр╕нр╕бр╕╣р╕е:", Object.keys(chiefResponse.rowsByTab));
  console.log("- р╕бр╕╡р╕Вр╣Йр╕нр╕бр╕╣р╕е reorderInfo:", !!chiefResponse.reorderInfo);
  console.log("- р╕кр╕Цр╕▓р╕Щр╕░:", chiefResponse.statusLine.value);
  
  // 5. р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Бр╕▓р╕гр╣Бр╕кр╕Фр╕Зр╕Ьр╕ер╣Гр╕Щр╕лр╕Щр╣Йр╕▓ Overview
  console.log("\nЁЯЦея╕П р╕Бр╕▓р╕гр╣Бр╕кр╕Фр╕Зр╕Ьр╕ер╣Гр╕Щр╕лр╕Щр╣Йр╕▓ Overview:");
  
  const overviewReorderData = chiefResponse.rowsByTab[mockInspectorSubmission.tab] || chiefResponse.rowsByTab["all"];
  console.log("- р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Чр╕╡р╣Ир╣Бр╕кр╕Фр╕З:", overviewReorderData.length, "р╕гр╕▓р╕вр╕Бр╕▓р╕г");
  console.log("- р╕ер╕│р╕Фр╕▒р╕Ър╕Бр╕▓р╕гр╣Бр╕кр╕Фр╕З:");
  overviewReorderData.forEach((item, index) => {
    const reason = chiefResponse.reorderInfo.reasonById[item.id] || "-";
    console.log(`  ${index + 1}. ${item.work} (${item.unit}) - р╕Др╕░р╣Бр╕Щр╕Щ: ${item.score} - р╣Ар╕лр╕Хр╕╕р╕Ьр╕е: ${reason}`);
  });
  
  // 6. р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Др╕зр╕▓р╕бр╕Цр╕╣р╕Бр╕Хр╣Йр╕нр╕Зр╕Вр╕нр╕Зр╕Бр╕▓р╕гр╕Лр╕┤р╕Зр╕Др╣М
  console.log("\nтЬЕ р╕Бр╕▓р╕гр╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Др╕зр╕▓р╕бр╕Цр╕╣р╕Бр╕Хр╣Йр╕нр╕З:");
  
  const originalOrder = mockInspectorSubmission.originalOrder;
  const newOrder = mockInspectorSubmission.newOrder;
  const displayOrder = overviewReorderData.map(item => item.id);
  
  const orderMatches = JSON.stringify(newOrder) === JSON.stringify(displayOrder);
  console.log("- р╕ер╕│р╕Фр╕▒р╕Ър╕Хр╕гр╕Зр╕Бр╕▒р╕Ър╕Чр╕╡р╣Ир╕Ир╕▒р╕Фр╣Гр╕лр╕бр╣И:", orderMatches ? "тЬЕ р╕Цр╕╣р╕Бр╕Хр╣Йр╕нр╕З" : "тЭМ р╣Др╕бр╣Ир╕Цр╕╣р╕Бр╕Хр╣Йр╕нр╕З");
  
  const hasAllReasons = newOrder.every(id => chiefResponse.reorderInfo.reasonById[id]);
  console.log("- р╕бр╕╡р╣Ар╕лр╕Хр╕╕р╕Ьр╕ер╕Др╕гр╕Ър╕Чр╕╕р╕Бр╕гр╕▓р╕вр╕Бр╕▓р╕г:", hasAllReasons ? "тЬЕ р╕Др╕гр╕Ър╕Цр╣Йр╕зр╕Щ" : "тЭМ р╣Др╕бр╣Ир╕Др╕гр╕Ъ");
  
  const gradesMatch = overviewReorderData.every(item => ["E", "H", "M", "L", "N"].includes(item.grade));
  console.log("- р╣Ар╕Бр╕гр╕Фр╕Цр╕╣р╕Бр╕Хр╣Йр╕нр╕З:", gradesMatch ? "тЬЕ р╕Цр╕╣р╕Бр╕Хр╣Йр╕нр╕З" : "тЭМ р╣Др╕бр╣Ир╕Цр╕╣р╕Бр╕Хр╣Йр╕нр╕З");
  
  console.log("\nЁЯОЙ р╕Бр╕▓р╕гр╕Чр╕Фр╕кр╕нр╕Ър╣Ар╕кр╕гр╣Зр╕Ир╕кр╕┤р╣Йр╕Щ!");
  
  if (orderMatches && hasAllReasons && gradesMatch) {
    console.log("тЬЕ р╕гр╕░р╕Ър╕Ър╕Лр╕┤р╕Зр╕Др╣Мр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕гр╕░р╕лр╕зр╣Ир╕▓р╕Зр╕кр╕нр╕Зр╕лр╕Щр╣Йр╕▓р╕Чр╕│р╕Зр╕▓р╕Щр╣Др╕Фр╣Йр╕Цр╕╣р╕Бр╕Хр╣Йр╕нр╕З!");
  } else {
    console.log("тЭМ р╕Юр╕Ър╕Ыр╕▒р╕Нр╕лр╕▓р╣Гр╕Щр╕Бр╕▓р╕гр╕Лр╕┤р╕Зр╕Др╣Мр╕Вр╣Йр╕нр╕бр╕╣р╕е р╕Бр╕гр╕╕р╕Ур╕▓р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ:");
    if (!orderMatches) console.log("   - р╕ер╕│р╕Фр╕▒р╕Ър╣Др╕бр╣Ир╕Хр╕гр╕Зр╕Бр╕▒р╕Щ");
    if (!hasAllReasons) console.log("   - р╣Ар╕лр╕Хр╕╕р╕Ьр╕ер╣Др╕бр╣Ир╕Др╕гр╕Ъ");
    if (!gradesMatch) console.log("   - р╣Ар╕Бр╕гр╕Фр╣Др╕бр╣Ир╕Цр╕╣р╕Бр╕Хр╣Йр╕нр╕З");
  }
}